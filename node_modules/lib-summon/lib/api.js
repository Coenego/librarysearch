var _ = require('underscore');
var crypto = require('crypto');
var req = require('request');

var config = require('../../../config');

var ResultModel = require('../../../models/result');
var ResultsModel = require('../../../models/results');

var sessionId = null;

/**
 * Initializes the Summon API
 *
 * @param  {Function}   callback            Standard callback function
 */
var init = function() {};

/**
 * Get the results from the Summon API
 * @see http://api.summon.serialssolutions.com
 *
 * @param  {String}    query                The query that will be processed to Summon
 */
var getSummonResults = module.exports.getSummonResults = function(query, callback) {

    // Create the header object that will be sent to the Summon API
    var header = {
        'Accept': 'application/json',
        'x-summon-date': convertDate(new Date()),
        'Host': config.constants.engines.summon.uri,
        'Version': config.constants.engines.summon.version,
        'Query': 's.q=' + query
    };

    // Convert the header to a string to create a hash afterwards
    var headerString = constructHeaderString(header);

    // Create a hash from the application key and the headerString
    var sha1Digest = crypto.createHmac('sha1', config.constants.engines.summon.auth.key).update(headerString).digest('base64');

    // Construct the header authentication string
    var authHeaderString = 'Summon ' + config.constants.engines.summon.auth.id + ';' + sha1Digest;
    header['Authorization'] = authHeaderString;

    // Construct the request url
    var url = 'http://' + header['Host'] + header['Version'] + '?' + header['Query'];

    // Create an options object that can be submitted to the Summon API
    var options = {
        'method': 'GET',
        'url': url,
        'timeout': config.constants.engines.summon.timeout,
        'headers': header
    };

    // Perform the request to the Summon API
    req(options, function(err, res, body) {

        if (err) {
            callback(err);
        } else {

            // Try parsing the JSON string as an object
            try {
                var response = JSON.parse(res.body);

                // Variable to store all the results from Summon
                var summonResults = [];

                _.each(response.documents, function(item) {

                    var title = cleanUpValue(item['Title'][0]);

                    var author = null;
                    if (item['Publisher_xml']) {
                        author = item['Publisher_xml'][0]['name'];
                    }

                    var date = null;
                    if (item['PublicationDate'][0]) {
                        var date = item['PublicationDate'][0];
                    }

                    var link = cleanUpValue(item.link);
                    var contentType = cleanUpValue(item['ContentType'][0]);

                    var thumbnail = null;
                    if (item['thumbnail_s']) {
                        thumbnail = item['thumbnail_s'][0];
                    }

                    var publicationPlace = null;
                    if (item['PublicationPlace']) {
                        publicationPlace = item['PublicationPlace'][0];
                    }

                    var branch = null;

                    var result = new ResultModel.Result(title, author, date, link, contentType, thumbnail, publicationPlace, branch);
                    summonResults.push(result);
                });

                var results = new ResultsModel.Results(response.recordCount, summonResults);
                callback(null, results);

            // When the parsing of the Summon result failed
            } catch (e) {
                callback('An error occured while parsing Summon data');
            }
        }
    });
};

/**
* Converts the header object to a string, needed for the Summon authentication
*
* @param  {Object} header               Object containing all the header information
* @return {String} headerString         String that will be used as a hash for the authentication
* @api private
*/
var constructHeaderString = function(header) {
    var headerString = '';
    _.each(header, function(value, key) {
        headerString += value + '\n';
    });
    return headerString;
}

/**
* Converts the date to the correct GMT
*
* @param  {Date}  date                   The date in a CEST format
* @return {Date}  date                   The date in a GMT format
* @api private
*/
var convertDate = function(date) {
    var d = date;
    var utc = d.getTime() + (d.getTimezoneOffset() * 60000);
    var offset = 2;
    return new Date(utc + (3600000 * offset)).toUTCString();
};

/**
* Strips the value down to a simple string
*
* @param  {String}  value               The value thad needs to be stripped
* @return {String}  stripped            The cleaned up value
* @api private
*/
var cleanUpValue = function(value) {
    if (value) {
        var stripped = value.replace('<h>','').replace('</h>','');
        return stripped;
    }
    return;
};

init();
