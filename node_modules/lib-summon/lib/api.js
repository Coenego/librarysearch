var _ = require('underscore');
var crypto = require('crypto');
var req = require('request');

var config = require('../../../config');

var sessionId = null;

/**
 * Initializes the Summon API
 *
 * @param  {Function}   callback         Standard callback function
 */
var init = function() {};

/**
 * Get the results from the Summon API
 * @see http://api.summon.serialssolutions.com
 *
 * @param  {String}    query                The query that will be processed to Summon
 */
var getSummonResults = module.exports.getSummonResults = function(query, callback) {

    // Create the header object that will be sent to the Summon API
    var header = {
        'Accept': 'application/json',
        'x-summon-date': convertDate(new Date()),
        'Host': config.constants.engines.summon.uri,
        'Version': config.constants.engines.summon.version,
        'Query': 's.q=' + query
    };

    // Convert the header to a string to create a hash afterwards
    var headerString = constructHeaderString(header);

    // Create a hash from the application key and the headerString
    var sha1Digest = crypto.createHmac('sha1', config.constants.engines.summon.auth.key).update(headerString).digest('base64');

    // Construct the header authentication string
    var authHeaderString = 'Summon ' + config.constants.engines.summon.auth.id + ';' + sha1Digest;
    header['Authorization'] = authHeaderString;

    // Construct the request url
    var url = 'http://' + header['Host'] + header['Version'] + '?' + header['Query'];

    // Create an options object that can be submitted to the Summon API
    var options = {
        'method': 'GET',
        'url': url,
        'headers': header
    };

    // Perform the request to the Summon API
    req(options, function(err, res, body) {
        if (err) {
            console.error('Error', err);
        }
        callback(err, res);
    });
};

/**
* Converts the header object to a string, needed for the Summon authentication
*
* @param  {Object} header               Object containing all the header information
* @return {String} headerString         String that will be used as a hash for the authentication
* @api private
*/
var constructHeaderString = function(header) {
    var headerString = '';
    _.each(header, function(value, key) {
        headerString += value + '\n';
    });
    return headerString;
}

/**
* Converts the date to the correct GMT
*
* @param  {Date}  date                   The date in a CEST format
* @return {Date}  date                   The date in a GMT format
* @api private
*/
var convertDate = function(date) {
    var d = date;
    var utc = d.getTime() + (d.getTimezoneOffset() * 60000);
    var offset = 2;
    return new Date(utc + (3600000 * offset)).toUTCString();
};

init();
