var _ = require('underscore');
var req = require('request');
var xml2js = require('xml2js');

var config = require('../../../config');

var ResultModel = require('../../../lib/models/result');
var ResultsModel = require('../../../lib/models/results');

/**
 * Initializes the Aquabrowser API
 *
 * @param  {Function}   callback            Standard callback function
 */
var init = function() {};

/**
 * Get the results from the AquaBrowser API
 * @see http://www.lib.cam.ac.uk/api/docs/ab_sru.htm
 * @see http://www.lib.cam.ac.uk/libraries/login/documentation/doc_Aquabrowser.html
 *
 * @param  {String}    query                The query that will be processed to AquaBrowser
 * @param  {Object}    parans               Extra request parameters for Summon
 */
var getAquabrowserResults = module.exports.getAquabrowserResults = function(query, params, callback) {

    // Construct the extra parameters queryy to be able to do an advanced search.
    query = '[title:"' + query + '"';

    // Check if extra parameters are added that need to be added inside the brackets (advanced search params)
    if (params && !_.isEmpty(params)) {
        if (params.type && params.type != "all") {
            var type = config.constants.types[params.type]['aquabrowser'];
            query += '%20format:"' + type + '"';
        }
    }

    // Closing bracket for the extra parameters
    query += ']'; 

    // Check if parameters are provided that need to be added outside the brackets (basic params)
    var maxRecords = (params.records) ? params.records : 10;
    query += '&maximumRecords=' + maxRecords;

    // Construct the url for the request
    var url = config.constants.engines.aquabrowser.uri + 'operation=searchRetrieve&version=1.1&query=' + query + '&recordSchema=dc';

    // Create an options object that can be submitted to the Aquabrowser API
    var options = {
        'url': url,
        'timeout': config.constants.engines.aquabrowser.timeout
    };

    // Perform the request to the Aquabrowser API
    req(options, function(err, res, body) {

        if (err) {
            callback('An error occured while parsing Aquabrowser data');
            console.log(err);
        } else {

            // Remove all the whitespace characters from the xml
            var xml = res.body.trim();

            // Create an options object for the JSON parsing
            var parseOpts = {
                'trim': true, 
                'mergeAttrs': true, 
                'explicitArray': false
            };

            // Parse the XML as a JSON string
            var jsonstring = xml2js.parseString(xml, parseOpts, function(err, res) {
                if (err) {
                    callback('An error occured while parsing Aquabrowser data');
                    console.log(err);
                }

                if (res) {

                    // Variable to store all the results from Aquabrowser
                    var aquabrowserResults = [];

                    // Returned records from Aquabrowser
                    var numRecords = Number(res['srw:searchRetrieveResponse']['srw:numberOfRecords']);

                    // If records are found
                    if (numRecords) {

                        var records = [];
                        var result = res['srw:searchRetrieveResponse']['srw:records']['srw:record'];
                        if (!_.isArray(result)) {
                            records.push(result);
                        } else {
                            records = result;
                        }

                        // Loop all the records and create a new resultmodel for each record
                        _.each(records, function(record) {

                            var title = "Title not found";
                            if (record['srw:recordData']) {
                                if (record['srw:recordData']['dc:title']) {
                                    title = record['srw:recordData']['dc:title'];
                                }
                            }

                            var author = "Author not found";
                            if (record['srw:recordData']) {
                                if (record['srw:recordData']['dc:creator']) {
                                    author = record['srw:recordData']['dc:creator'];
                                }
                            }

                            var date = "Date not found";
                            if (record['srw:recordData']) {
                                if (record['srw:recordData']['dc:date']) {
                                    date = record['srw:recordData']['dc:date'];
                                }
                            }

                            var link = "Link not found";
                            if (record['srw:recordData']) {
                                if (record['srw:extraRecordData']['recordURL']){
                                    link = record['srw:extraRecordData']['recordURL'];
                                }
                            }
                            
                            var contentType = "contentType not found";
                            if (record['srw:recordData']) {
                                if (record['srw:recordData']['dc:format']) {
                                    contentType = record['srw:recordData']['dc:format'];
                                }
                            }

                            var thumbnail = '';
                            if (record['srw:recordData']) {
                                if (record['srw:extraRecordData']['coverimageurl']) {
                                    thumbnail = record['srw:extraRecordData']['coverimageurl'];
                                }
                            }

                            var branch = "Branch not found";
                            if (record['srw:recordData']) {
                                if (record['srw:extraRecordData']['dc:branch']) {
                                    branch = record['srw:extraRecordData']['dc:branch'];                                
                                }
                            }

                            var publicationPlace = null;

                            var result = new ResultModel.Result(title, author, date, link, contentType, thumbnail, publicationPlace, branch);
                            aquabrowserResults.push(result);
                        });
                    }

                    var results = new ResultsModel.Results(numRecords, [], aquabrowserResults);
                    callback(null, results);
                }
            });
        }
    });
};

init();
