var _ = require('underscore');
var req = require('request');
var xml2js = require('xml2js');

var config = require('../../../config');

var ResultModel = require('../../../models/result');
var ResultsModel = require('../../../models/results');

/**
 * Initializes the Aquabrowser API
 *
 * @param  {Function}   callback            Standard callback function
 */
var init = function() {};

/**
 * Get the results from the AquaBrowser API
 * @see http://www.lib.cam.ac.uk/api/docs/ab_sru.htm
 *
 * @param  {String}    query                The query that will be processed to AquaBrowser
 */
var getAquabrowserResults = module.exports.getAquabrowserResults = function(query, callback) {

    // Construct the url for the request
    var url = config.constants.engines.aquabrowser.uri + 'operation=searchRetrieve&version=1.1&query=' + query + '&maximumRecords=20&recordSchema=dc';

    // Create an options object that can be submitted to the Aquabrowser API
    var options = {
        'url': url,
        'timeout': config.constants.engines.aquabrowser.timeout
    };

    // Perform the request to the Aquabrowser API
    req(options, function(err, res, body) {

        if (err) {
            callback('An error occured while parsing Aquabrowser data');
        } else {

            // Remove all the whitespace characters from the xml
            var xml = res.body.trim();

            // Create an options object for the JSON parsing
            var parseOpts = {
                'trim': true, 
                'mergeAttrs': true, 
                'explicitArray': false
            };

            // Parse the XML as a JSON string
            var jsonstring = xml2js.parseString(xml, parseOpts, function(err, res) {
                if (err) {
                    callback('An error occured while parsing Aquabrowser data');
                }
                if (res) {

                    // Variable to store all the results from Aquabrowser
                    var aquabrowserResults = [];

                    var numRecords = res['srw:searchRetrieveResponse']['srw:numberOfRecords'];
                    var records = res['srw:searchRetrieveResponse']['srw:records']['srw:record'];

                    _.each(records, function(record) {

                        if (!record.error) {

                            var title = record['srw:recordData']['dc:title'];
                            var author = record['srw:recordData']['dc:creator'];
                            var date = record['srw:recordData']['dc:date'];
                            var link = record['srw:extraRecordData']['recordURL'];
                            var contentType = record['srw:recordData']['dc:format'];

                            var thumbnail = '';
                            if (record['srw:extraRecordData']['coverimageurl']) {
                                thumbnail = record['srw:extraRecordData']['coverimageurl'];
                            }

                            var publicationPlace = null;
                            var branch = record['srw:extraRecordData']['dc:branch'];

                            var result = new ResultModel.Result(title, author, date, link, contentType, thumbnail, publicationPlace, branch);
                            aquabrowserResults.push(result);
                        }
                    });

                    var results = new ResultsModel.Results(numRecords, aquabrowserResults);
                    callback(null, results);
                }
            });
        }
    });
};

init();
